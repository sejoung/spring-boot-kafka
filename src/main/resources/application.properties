spring.kafka.consumer.group-id=test

# earliest: \uC624\uD504\uC14B\uC744 \uCD08\uAE30\uAC12\uC73C\uB85C \uC790\uB3D9 \uB9AC\uC14B
# largest: \uC624\uD504\uC14B \uAC12\uC744 \uCD5C\uB300\uAC12\uC73C\uB85C \uC790\uB3D9 \uB9AC\uC14B
# none: \uCEE8\uC288\uBA38 \uADF8\uB8F9\uC5D0\uC11C \uC774\uC804 \uC624\uD504\uC14B\uC744 \uCC3E\uC9C0 \uBABB\uD55C\uB2E4\uBA74, \uCEE8\uC288\uBA38\uC5D0 \uC5D0\uB7EC\uB97C \uB358\uC9D0
# anything else: \uCEE8\uC288\uBA38\uC5D0 \uC5D0\uB7EC\uB97C \uB358\uC9D0 

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=2000

spring.kafka.consumer.heartbeat-interval=1000

spring.kafka.listener.poll-timeout=100


# single \uACFC batch\uAC00 \uC788\uC74C
#spring.kafka.listener.type=batch

spring.kafka.consumer.enable-auto-commit=false

# BATCH
# Commit whatever has already been processed before the next poll.
# COUNT
# Commit pending updates after ackCount has been exceeded.
# COUNT_TIME
# Commit pending updates after ackCount has been exceeded or after ackTime has elapsed.
# MANUAL
# User takes responsibility for acks using an AcknowledgingMessageListener.
# MANUAL_IMMEDIATE
# User takes responsibility for acks using an AcknowledgingMessageListener.
# RECORD
# Commit after each record is processed by the listener.
# TIME
# Commit pending updates after ackTime has elapsed.

spring.kafka.listener.ack-mode=manual

spring.kafka.listener.concurrency=1